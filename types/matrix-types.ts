export function AutoDiscovery(): void;
export namespace AutoDiscovery {
  const FAIL_ERROR: any;
  const FAIL_PROMPT: any;
  const PROMPT: any;
  const SUCCESS: any;
  function findClientConfig(_x: any, ...args: any[]): any;
}
export const CRYPTO_ENABLED: boolean;
export namespace ContentHelpers {
  function makeEmoteMessage(body: any): any;
  function makeHtmlEmote(body: any, htmlBody: any): any;
  function makeHtmlMessage(body: any, htmlBody: any): any;
  function makeHtmlNotice(body: any, htmlBody: any): any;
  function makeNotice(body: any): any;
  function makeTextMessage(body: any): any;
}
export namespace ContentRepo {
  function getHttpUriForMxc(baseUrl: any, mxc: any, width: any, height: any, resizeMethod: any, allowDirectLinks: any): any;
  function getIdenticonUri(baseUrl: any, identiconString: any, width: any, height: any): any;
}
export const EventStatus: {
  CANCELLED: string;
  ENCRYPTING: string;
  NOT_SENT: string;
  QUEUED: string;
  SENDING: string;
  SENT: string;
};
export class EventTimeline {
  static BACKWARDS: string;
  static FORWARDS: string;
  static setEventMetadata(event: any, stateContext: any, toStartOfTimeline: any): void;
  constructor(eventTimelineSet: any);
  addEvent(event: any, atStart: any): void;
  fork(direction: any): any;
  forkLive(direction: any): any;
  getBaseIndex(): any;
  getEvents(): any;
  getFilter(): any;
  getNeighbouringTimeline(direction: any): any;
  getPaginationToken(direction: any): any;
  getRoomId(): any;
  getState(direction: any): any;
  getTimelineSet(): any;
  initialiseState(stateEvents: any): void;
  removeEvent(eventId: any): any;
  setNeighbouringTimeline(neighbour: any, direction: any): void;
  setPaginationToken(token: any, direction: any): void;
}
export class EventTimelineSet {
  constructor(room: any, opts: any);
  room: any;
  addEventToTimeline(event: any, timeline: any, toStartOfTimeline: any): void;
  addEventsToTimeline(events: any, toStartOfTimeline: any, timeline: any, paginationToken: any): void;
  addListener(type: any, listener: any): any;
  addLiveEvent(event: any, duplicateStrategy: any): void;
  addTimeline(): any;
  compareEventOrdering(eventId1: any, eventId2: any): any;
  emit(type: any, args: any): any;
  eventIdToTimeline(eventId: any): any;
  eventNames(): any;
  findEventById(eventId: any): any;
  getFilter(): any;
  getLiveTimeline(): any;
  getMaxListeners(): any;
  getPendingEvents(): any;
  getTimelineForEvent(eventId: any): any;
  handleRemoteEcho(localEvent: any, oldEventId: any, newEventId: any): void;
  listenerCount(type: any): any;
  listeners(type: any): any;
  off(type: any, listener: any): any;
  on(type: any, listener: any): any;
  once(type: any, listener: any): any;
  prependListener(type: any, listener: any): any;
  prependOnceListener(type: any, listener: any): any;
  rawListeners(type: any): any;
  removeAllListeners(type: any, ...args: any[]): any;
  removeEvent(eventId: any): any;
  removeListener(type: any, listener: any): any;
  replaceEventId(oldEventId: any, newEventId: any): void;
  resetLiveTimeline(backPaginationToken: any, forwardPaginationToken: any): void;
  setFilter(filter: any): void;
  setMaxListeners(n: any): any;
}
export class Filter {
  static LAZY_LOADING_MESSAGES_FILTER: {
    lazy_load_members: boolean;
  };
  static LAZY_LOADING_SYNC_FILTER: {
    room: {
      state: {
        lazy_load_members: any;
      };
    };
  };
  static fromJson(userId: any, filterId: any, jsonObj: any): any;
  constructor(userId: any, filterId: any);
  userId: any;
  filterId: any;
  definition: any;
  filterRoomTimeline(events: any): any;
  getDefinition(): any;
  getFilterId(): any;
  getRoomTimelineFilterComponent(): any;
  setDefinition(definition: any): void;
  setIncludeLeaveRooms(includeLeave: any): void;
  setTimelineLimit(limit: any): void;
}
export class Group {
  constructor(groupId: any);
  groupId: any;
  name: any;
  avatarUrl: any;
  myMembership: any;
  inviter: any;
  addListener(type: any, listener: any): any;
  emit(type: any, args: any): any;
  eventNames(): any;
  getMaxListeners(): any;
  listenerCount(type: any): any;
  listeners(type: any): any;
  off(type: any, listener: any): any;
  on(type: any, listener: any): any;
  once(type: any, listener: any): any;
  prependListener(type: any, listener: any): any;
  prependOnceListener(type: any, listener: any): any;
  rawListeners(type: any): any;
  removeAllListeners(type: any, ...args: any[]): any;
  removeListener(type: any, listener: any): any;
  setInviter(inviter: any): void;
  setMaxListeners(n: any): any;
  setMyMembership(membership: any): void;
  setProfile(name: any, avatarUrl: any): void;
}
export class IndexedDBCryptoStore {
  static STORE_ACCOUNT: string;
  static STORE_BACKUP: string;
  static STORE_DEVICE_DATA: string;
  static STORE_INBOUND_GROUP_SESSIONS: string;
  static STORE_ROOMS: string;
  static STORE_SESSIONS: string;
  constructor(indexedDB: any, dbName: any);
  addEndToEndInboundGroupSession(senderCurve25519Key: any, sessionId: any, sessionData: any, txn: any): void;
  countEndToEndSessions(txn: any, func: any): void;
  countSessionsNeedingBackup(txn: any): any;
  deleteAllData(): any;
  deleteOutgoingRoomKeyRequest(requestId: any, expectedState: any): any;
  doTxn(mode: any, stores: any, func: any): any;
  getAccount(txn: any, func: any): void;
  getAllEndToEndInboundGroupSessions(txn: any, func: any): void;
  getAllEndToEndSessions(txn: any, func: any): void;
  getEndToEndDeviceData(txn: any, func: any): void;
  getEndToEndInboundGroupSession(senderCurve25519Key: any, sessionId: any, txn: any, func: any): void;
  getEndToEndRooms(txn: any, func: any): void;
  getEndToEndSession(deviceKey: any, sessionId: any, txn: any, func: any): void;
  getEndToEndSessions(deviceKey: any, txn: any, func: any): void;
  getOrAddOutgoingRoomKeyRequest(request: any): any;
  getOutgoingRoomKeyRequest(requestBody: any): any;
  getOutgoingRoomKeyRequestByState(wantedStates: any): any;
  getOutgoingRoomKeyRequestsByTarget(userId: any, deviceId: any, wantedStates: any): any;
  getSessionsNeedingBackup(limit: any): any;
  markSessionsNeedingBackup(sessions: any, txn: any): any;
  storeAccount(txn: any, newData: any): void;
  storeEndToEndDeviceData(deviceData: any, txn: any): void;
  storeEndToEndInboundGroupSession(senderCurve25519Key: any, sessionId: any, sessionData: any, txn: any): void;
  storeEndToEndRoom(roomId: any, roomInfo: any, txn: any): void;
  storeEndToEndSession(deviceKey: any, sessionId: any, sessionInfo: any, txn: any): void;
  unmarkSessionsNeedingBackup(sessions: any, txn: any): any;
  updateOutgoingRoomKeyRequest(requestId: any, expectedState: any, updates: any): any;
}
export class IndexedDBStore {
  constructor(opts: any);
  backend: any;
  startedUp: any;
  clearOutOfBandMembers(roomId: any): any;
  deleteAllData(): any;
  getAccountData(eventType: any): any;
  getClientOptions(): any;
  getFilter(userId: any, filterId: any): any;
  getFilterIdByName(filterName: any): any;
  getGroup(groupId: any): any;
  getGroups(): any;
  getOutOfBandMembers(roomId: any): any;
  getRoom(roomId: any): any;
  getRoomSummaries(): any;
  getRooms(): any;
  getSavedSync(): any;
  getSavedSyncToken(): any;
  getSyncToken(): any;
  getUser(userId: any): any;
  getUsers(): any;
  isNewlyCreated(): any;
  removeRoom(roomId: any): void;
  save(): any;
  scrollback(room: any, limit: any): any;
  setFilterIdByName(filterName: any, filterId: any): void;
  setOutOfBandMembers(roomId: any, membershipEvents: any): any;
  setSyncData(syncData: any): any;
  setSyncToken(token: any): void;
  startup(): any;
  storeAccountDataEvents(events: any): void;
  storeClientOptions(options: any): any;
  storeEvents(room: any, events: any, token: any, toStart: any): void;
  storeFilter(filter: any): void;
  storeGroup(group: any): void;
  storeRoom(room: any): void;
  storeUser(user: any): void;
  wantsSave(): any;
}
export const IndexedDBStoreBackend: any;
export class InteractiveAuth {
  constructor(opts: any);
  attemptAuth(): any;
  getClientSecret(): any;
  getEmailSid(): any;
  getSessionId(): any;
  getStageParams(loginType: any): any;
  poll(): void;
  setEmailSid(sid: any): void;
  submitAuthDict(authData: any, background: any): void;
}
export function InvalidStoreError(reason: any, value: any): any;
export namespace InvalidStoreError {
  const TOGGLED_LAZY_LOADING: string;
  function captureStackTrace(p0: any, p1: any): any;
  const stackTraceLimit: number;
}
export interface MatrixClient {
  RESTORE_BACKUP_ERROR_BAD_KEY: string;
  olmVersion: any;
  reEmitter: any;
  store: any;
  deviceId: any;
  credentials: any;
  scheduler: any;
  clientRunning: any;
  callList: any;
  timelineSupport: any;
  urlPreviewCache: any;
  acceptGroupInvite(groupId: any, ...args: any[]): any;
  addListener(type: any, listener: any): any;
  addPushRule(scope: any, kind: any, ruleId: any, body: any, callback: any): any;
  addRoomToGroup(groupId: any, roomId: any, isPublic: any): any;
  addRoomToGroupSummary(groupId: any, roomId: any, categoryId: any): any;
  addThreePid(creds: any, bind: any, callback: any): any;
  addUserToGroupSummary(groupId: any, userId: any, roleId: any): any;
  backPaginateRoomEventsSearch(searchResults: any): any;
  ban(roomId: any, userId: any, reason: any, callback: any): any;
  beginKeyVerification(method: any, userId: any, deviceId: any): any;
  cancelAndResendEventRoomKeyRequest(event: any): void;
  cancelPendingEvent(event: any): void;
  cancelUpload(promise: any): any;
  claimOneTimeKeys(devices: any, key_algorithm: any): any;
  clearStores(): any;
  createAlias(alias: any, roomId: any, callback: any): any;
  createFilter(content: any): any;
  createGroup(content: any): any;
  createKeyBackupVersion(info: any): any;
  createRoom(options: any, callback: any): any;
  deactivateAccount(auth: any, erase: any): any;
  deleteAlias(alias: any, callback: any): any;
  deleteDevice(device_id: any, auth: any): any;
  deleteKeyBackupVersion(version: any): any;
  deleteKeysFromBackup(roomId: any, sessionId: any, version: any): any;
  deleteMultipleDevices(devices: any, auth: any): any;
  deletePushRule(scope: any, kind: any, ruleId: any, callback: any): any;
  deleteRoomTag(roomId: any, tagName: any, callback: any): any;
  deleteThreePid(medium: any, address: any): any;
  disableKeyBackup(): void;
  doesServerSupportLazyLoading(...args: any[]): any;
  downloadKeys(userIds: any, forceDownload: any): any;
  downloadKeysForUsers(userIds: any, opts: any): any;
  dropFromPresenceList(callback: any, userIds: any): any;
  emit(type: any, args: any): any;
  enableKeyBackup(info: any): void;
  eventNames(): any;
  exportRoomKeys(): any;
  fetchRoomEvent(roomId: any, eventId: any, callback: any): any;
  forceDiscardSession(roomId: any): void;
  forget(roomId: any, deleteRoom: any, callback: any): any;
  generateClientSecret(): any;
  getAccessToken(): any;
  getAccountData(eventType: any): any;
  getCanResetTimelineCallback(): any;
  getCapabilities(): any;
  getCasLoginUrl(redirectUrl: any): any;
  getCurrentUploads(): any;
  getDeviceEd25519Key(): any;
  getDeviceId(): any;
  getDevices(): any;
  getDomain(): any;
  getEventMapper(): any;
  getEventSenderDeviceInfo(_x10: any, ...args: any[]): any;
  getEventTimeline(timelineSet: any, eventId: any): any;
  getFallbackAuthUrl(loginType: any, authSessionId: any): any;
  getFilter(userId: any, filterId: any, allowCached: any): any;
  getGlobalBlacklistUnverifiedDevices(): any;
  getGroup(groupId: any): any;
  getGroupInvitedUsers(groupId: any): any;
  getGroupProfile(groupId: any): any;
  getGroupRooms(groupId: any): any;
  getGroupSummary(groupId: any): any;
  getGroupUsers(groupId: any): any;
  getGroups(): any;
  getHomeserverUrl(): any;
  getIdentityServerUrl(...args: any[]): any;
  getIgnoredUsers(): any;
  getJoinedGroups(): any;
  getJoinedRoomMembers(roomId: any): any;
  getJoinedRooms(): any;
  getKeyBackupEnabled(): any;
  getKeyBackupVersion(): any;
  getKeyChanges(oldToken: any, newToken: any): any;
  getMaxListeners(): any;
  getMediaConfig(callback: any): any;
  getNotifTimelineSet(): any;
  getOpenIdToken(): any;
  getOrCreateFilter(filterName: any, filter: any): any;
  getPresenceList(callback: any): any;
  getProfileInfo(userId: any, info: any, callback: any): any;
  getPublicisedGroups(userIds: any): any;
  getPushActionsForEvent(event: any): any;
  getPushRules(callback: any): any;
  getPushers(callback: any): any;
  getRoom(roomId: any): any;
  getRoomDirectoryVisibility(roomId: any, callback: any): any;
  getRoomIdForAlias(alias: any, callback: any): any;
  getRoomPushRule(scope: any, roomId: any): any;
  getRoomTags(roomId: any, callback: any): any;
  getRooms(): any;
  getScheduler(): any;
  getSsoLoginUrl(redirectUrl: any, loginType: any): any;
  getStateEvent(roomId: any, eventType: any, stateKey: any, callback: any): any;
  getStoredDevice(_x2: any, _x3: any, ...args: any[]): any;
  getStoredDevicesForUser(_x: any, ...args: any[]): any;
  getSyncState(): any;
  getSyncStateData(): any;
  getThirdpartyLocation(protocol: any, params: any): any;
  getThirdpartyProtocols(): any;
  getThirdpartyUser(protocol: any, params: any): any;
  getThreePids(callback: any): any;
  getTurnServers(): any;
  getUrlPreview(url: any, ts: any, callback: any): any;
  getUser(userId: any): any;
  getUserId(): any;
  getUserIdLocalpart(): any;
  getUsers(): any;
  getVisibleRooms(): any;
  hasLazyLoadMembersEnabled(): any;
  importRoomKeys(keys: any): any;
  initCrypto(...args: any[]): any;
  invite(roomId: any, userId: any, callback: any): any;
  inviteByEmail(roomId: any, email: any, callback: any): any;
  inviteByThreePid(roomId: any, medium: any, address: any, callback: any): any;
  inviteToPresenceList(callback: any, userIds: any): any;
  inviteUserToGroup(groupId: any, userId: any): any;
  isCryptoEnabled(): any;
  isEventSenderVerified(_x11: any, ...args: any[]): any;
  isGuest(): any;
  isKeyBackupTrusted(info: any): any;
  isLoggedIn(): any;
  isRoomEncrypted(roomId: any): any;
  isUserIgnored(userId: any): any;
  isUsernameAvailable(username: any): any;
  isValidRecoveryKey(recoveryKey: any): any;
  joinGroup(groupId: any): any;
  joinRoom(roomIdOrAlias: any, opts: any, callback: any): any;
  kick(roomId: any, userId: any, reason: any, callback: any): any;
  leave(roomId: any, callback: any): any;
  leaveGroup(groupId: any): any;
  listenerCount(type: any): any;
  listeners(type: any): any;
  login(loginType: any, data: any, callback: any): any;
  loginFlows(callback: any): any;
  loginWithPassword(user: any, password: any, callback: any): any;
  loginWithSAML2(relayState: any, callback: any): any;
  loginWithToken(token: any, callback: any): any;
  logout(callback: any): any;
  lookupThreePid(medium: any, address: any, callback: any): any;
  makeTxnId(): any;
  members(roomId: any, includeMembership: any, excludeMembership: any, atEventId: any, callback: any): any;
  mxcUrlToHttp(mxcUrl: any, width: any, height: any, resizeMethod: any, allowDirectLinks: any): any;
  off(type: any, listener: any): any;
  on(type: any, listener: any): any;
  once(type: any, listener: any): any;
  paginateEventTimeline(eventTimeline: any, opts: any): any;
  peekInRoom(roomId: any): any;
  prepareKeyBackupVersion(_x12: any, ...args: any[]): any;
  prependListener(type: any, listener: any): any;
  prependOnceListener(type: any, listener: any): any;
  publicRooms(options: any, callback: any): any;
  rawListeners(type: any): any;
  redactEvent(roomId: any, eventId: any, callback: any): any;
  register(username: any, password: any, sessionId: any, auth: any, bindThreepids: any, guestAccessToken: any, callback: any): any;
  registerGuest(opts: any, callback: any): any;
  registerRequest(data: any, kind: any, callback: any): any;
  removeAllListeners(type: any, ...args: any[]): any;
  removeListener(type: any, listener: any): any;
  removeRoomFromGroup(groupId: any, roomId: any): any;
  removeRoomFromGroupSummary(groupId: any, roomId: any): any;
  removeUserFromGroup(groupId: any, userId: any): any;
  removeUserFromGroupSummary(groupId: any, userId: any): any;
  requestAdd3pidEmailToken(email: any, clientSecret: any, sendAttempt: any, nextLink: any): any;
  requestAdd3pidMsisdnToken(phoneCountry: any, phoneNumber: any, clientSecret: any, sendAttempt: any, nextLink: any): any;
  requestEmailToken(email: any, clientSecret: any, sendAttempt: any, nextLink: any, callback: any): any;
  requestPasswordEmailToken(email: any, clientSecret: any, sendAttempt: any, nextLink: any): any;
  requestPasswordMsisdnToken(phoneCountry: any, phoneNumber: any, clientSecret: any, sendAttempt: any, nextLink: any): any;
  requestRegisterEmailToken(email: any, clientSecret: any, sendAttempt: any, nextLink: any): any;
  requestRegisterMsisdnToken(phoneCountry: any, phoneNumber: any, clientSecret: any, sendAttempt: any, nextLink: any): any;
  requestVerification(userId: any, devices: any, methods: any): any;
  resendEvent(event: any, room: any): any;
  resetNotifTimelineSet(): void;
  resolveRoomAlias(roomAlias: any, callback: any): any;
  restoreKeyBackupWithPassword(_x13: any, _x14: any, _x15: any, _x16: any, ...args: any[]): any;
  restoreKeyBackupWithRecoveryKey(recoveryKey: any, targetRoomId: any, targetSessionId: any, backupInfo: any): any;
  retryImmediately(): any;
  roomInitialSync(roomId: any, limit: any, callback: any): any;
  roomState(roomId: any, callback: any): any;
  scheduleAllGroupSessionsForBackup(...args: any[]): any;
  scrollback(room: any, limit: any, callback: any): any;
  search(opts: any, callback: any): any;
  searchMessageText(opts: any, callback: any): any;
  searchRoomEvents(opts: any): any;
  searchUserDirectory(opts: any): any;
  sendEmoteMessage(roomId: any, body: any, txnId: any, callback: any): any;
  sendEvent(roomId: any, eventType: any, content: any, txnId: any, callback: any): any;
  sendHtmlEmote(roomId: any, body: any, htmlBody: any, callback: any): any;
  sendHtmlMessage(roomId: any, body: any, htmlBody: any, callback: any): any;
  sendHtmlNotice(roomId: any, body: any, htmlBody: any, callback: any): any;
  sendImageMessage(roomId: any, url: any, info: any, text: any, callback: any): any;
  sendKeyBackup(roomId: any, sessionId: any, version: any, data: any): any;
  sendMessage(roomId: any, content: any, txnId: any, callback: any): any;
  sendNotice(roomId: any, body: any, txnId: any, callback: any): any;
  sendReadReceipt(event: any, callback: any): any;
  sendReceipt(event: any, receiptType: any, callback: any): any;
  sendStateEvent(roomId: any, eventType: any, content: any, stateKey: any, callback: any): any;
  sendStickerMessage(roomId: any, url: any, info: any, text: any, callback: any): any;
  sendTextMessage(roomId: any, body: any, txnId: any, callback: any): any;
  sendToDevice(eventType: any, contentMap: any, txnId: any): any;
  sendTyping(roomId: any, isTyping: any, timeoutMs: any, callback: any): any;
  setAccountData(eventType: any, contents: any, callback: any): any;
  setAvatarUrl(url: any, callback: any): any;
  setCanResetTimelineCallback(cb: any): void;
  setDeviceBlocked(userId: any, deviceId: any, blocked: any): any;
  setDeviceDetails(device_id: any, body: any): any;
  setDeviceKnown(userId: any, deviceId: any, known: any): any;
  setDeviceVerified(userId: any, deviceId: any, verified: any): any;
  setDisplayName(name: any, callback: any): any;
  setForceTURN(forceTURN: any): void;
  setGlobalBlacklistUnverifiedDevices(value: any): void;
  setGroupJoinPolicy(groupId: any, policy: any): any;
  setGroupProfile(groupId: any, profile: any): any;
  setGroupPublicity(groupId: any, isPublic: any): any;
  setGuest(isGuest: any): void;
  setGuestAccess(roomId: any, opts: any): any;
  setIgnoredUsers(userIds: any, callback: any): any;
  setMaxListeners(n: any): any;
  setNotifTimelineSet(notifTimelineSet: any): void;
  setPassword(authDict: any, newPassword: any, callback: any): any;
  setPowerLevel(roomId: any, userId: any, powerLevel: any, event: any, callback: any): any;
  setPresence(opts: any, callback: any): any;
  setProfileInfo(info: any, data: any, callback: any): any;
  setPushRuleActions(scope: any, kind: any, ruleId: any, actions: any, callback: any): any;
  setPushRuleEnabled(scope: any, kind: any, ruleId: any, enabled: any, callback: any): any;
  setPusher(pusher: any, callback: any): any;
  setRoomAccountData(roomId: any, eventType: any, content: any, callback: any): any;
  setRoomDirectoryVisibility(roomId: any, visibility: any, callback: any): any;
  setRoomDirectoryVisibilityAppService(networkId: any, roomId: any, visibility: any, callback: any): any;
  setRoomEncryption(roomId: any, config: any): any;
  setRoomMutePushRule(scope: any, roomId: any, mute: any): any;
  setRoomName(roomId: any, name: any, callback: any): any;
  setRoomReadMarkers(roomId: any, eventId: any, rrEvent: any): any;
  setRoomReadMarkersHttpRequest(roomId: any, rmEventId: any, rrEventId: any): any;
  setRoomTag(roomId: any, tagName: any, metadata: any, callback: any): any;
  setRoomTopic(roomId: any, topic: any, callback: any): any;
  startClient(_x18: any, ...args: any[]): any;
  stopClient(): void;
  stopPeeking(): void;
  submitMsisdnToken(sid: any, clientSecret: any, token: any): any;
  supportsVoip(): any;
  syncLeftRooms(): any;
  turnServer(callback: any): any;
  unban(roomId: any, userId: any, callback: any): any;
  updateGroupRoomVisibility(groupId: any, roomId: any, isPublic: any): any;
  upgradeRoom(roomId: any, newVersion: any): any;
  uploadContent(file: any, opts: any): any;
  uploadKeys(): any;
  uploadKeysRequest(content: any, opts: any, callback: any): any;
}
export interface MatrixError {
  errcode: any;
  name: any;
  message: any;
  data: any;
}
export interface MatrixEvent {
  event: any;
  sender: any;
  target: any;
  status: any;
  error: any;
  forwardLooking: any;
  addListener(type: any, listener: any): any;
  attemptDecryption(_x: any, ...args: any[]): any;
  cancelAndResendKeyRequest(crypto: any): void;
  emit(type: any, args: any): any;
  eventNames(): any;
  getAge(): any;
  getClaimedEd25519Key(): any;
  getContent(): any;
  getDate(): any;
  getDirectionalContent(): any;
  getForwardingCurve25519KeyChain(): any;
  getId(): any;
  getKeysClaimed(): any;
  getMaxListeners(): any;
  getPrevContent(): any;
  getPushActions(): any;
  getRoomId(): any;
  getSender(): any;
  getSenderKey(): any;
  getStateKey(): any;
  getTs(): any;
  getType(): any;
  getUnsigned(): any;
  getWireContent(): any;
  getWireType(): any;
  handleRemoteEcho(event: any): void;
  isBeingDecrypted(): any;
  isDecryptionFailure(): any;
  isEncrypted(): any;
  isRedacted(): any;
  isState(): any;
  listenerCount(type: any): any;
  listeners(type: any): any;
  makeEncrypted(crypto_type: any, crypto_content: any, senderCurve25519Key: any, claimedEd25519Key: any): void;
  makeRedacted(redaction_event: any): void;
  off(type: any, listener: any): any;
  on(type: any, listener: any): any;
  once(type: any, listener: any): any;
  prependListener(type: any, listener: any): any;
  prependOnceListener(type: any, listener: any): any;
  rawListeners(type: any): any;
  removeAllListeners(type: any, ...args: any[]): any;
  removeListener(type: any, listener: any): any;
  setMaxListeners(n: any): any;
  setPushActions(pushActions: any): void;
}
export class MatrixHttpApi {
  constructor(event_emitter: any, opts: any);
  event_emitter: any;
  opts: any;
  useAuthorizationHeader: any;
  uploads: any;
  authedRequest(callback: any, method: any, path: any, queryParams: any, data: any, opts: any): any;
  authedRequestWithPrefix(callback: any, method: any, path: any, queryParams: any, data: any, prefix: any, localTimeoutMs: any): any;
  cancelUpload(promise: any): any;
  getContentUri(): any;
  getCurrentUploads(): any;
  getUrl(path: any, queryParams: any, prefix: any): any;
  idServerRequest(callback: any, method: any, path: any, params: any, prefix: any): any;
  request(callback: any, method: any, path: any, queryParams: any, data: any, opts: any): any;
  requestOtherUrl(callback: any, method: any, uri: any, queryParams: any, data: any, opts: any): any;
  requestWithPrefix(callback: any, method: any, path: any, queryParams: any, data: any, prefix: any, localTimeoutMs: any): any;
  uploadContent(file: any, opts: any): any;
}
export class MatrixInMemoryStore {
  constructor(opts: any);
  rooms: any;
  groups: any;
  users: any;
  syncToken: any;
  filters: any;
  accountData: any;
  localStorage: any;
  deleteAllData(): any;
  getAccountData(eventType: any): any;
  getClientOptions(): any;
  getFilter(userId: any, filterId: any): any;
  getFilterIdByName(filterName: any): any;
  getGroup(groupId: any): any;
  getGroups(): any;
  getOutOfBandMembers(roomId: any): any;
  getRoom(roomId: any): any;
  getRoomSummaries(): any;
  getRooms(): any;
  getSavedSync(): any;
  getSavedSyncToken(): any;
  getSyncToken(): any;
  getUser(userId: any): any;
  getUsers(): any;
  isNewlyCreated(): any;
  removeRoom(roomId: any): void;
  save(): void;
  scrollback(room: any, limit: any): any;
  setFilterIdByName(filterName: any, filterId: any): void;
  setOutOfBandMembers(roomId: any, membershipEvents: any): any;
  setSyncData(syncData: any): any;
  setSyncToken(token: any): void;
  startup(): any;
  storeAccountDataEvents(events: any): void;
  storeClientOptions(options: any): any;
  storeEvents(room: any, events: any, token: any, toStart: any): void;
  storeFilter(filter: any): void;
  storeGroup(group: any): void;
  storeRoom(room: any): void;
  storeUser(user: any): void;
  wantsSave(): any;
}
export class MatrixScheduler {
  static QUEUE_MESSAGES(event: any): any;
  static RETRY_BACKOFF_RATELIMIT(event: any, attempts: any, err: any): any;
  constructor(retryAlgorithm: any, queueAlgorithm: any);
  retryAlgorithm: any;
  queueAlgorithm: any;
  getQueueForEvent(event: any): any;
  queueEvent(event: any): any;
  removeEventFromQueue(event: any): any;
  setProcessFunction(fn: any): void;
}
export class MemoryCryptoStore {
  addEndToEndInboundGroupSession(senderCurve25519Key: any, sessionId: any, sessionData: any, txn: any): void;
  countEndToEndSessions(txn: any, func: any): any;
  countSessionsNeedingBackup(): any;
  deleteAllData(): any;
  deleteOutgoingRoomKeyRequest(requestId: any, expectedState: any): any;
  doTxn(mode: any, stores: any, func: any): any;
  getAccount(txn: any, func: any): void;
  getAllEndToEndInboundGroupSessions(txn: any, func: any): void;
  getAllEndToEndSessions(txn: any, func: any): void;
  getEndToEndDeviceData(txn: any, func: any): void;
  getEndToEndInboundGroupSession(senderCurve25519Key: any, sessionId: any, txn: any, func: any): void;
  getEndToEndRooms(txn: any, func: any): void;
  getEndToEndSession(deviceKey: any, sessionId: any, txn: any, func: any): void;
  getEndToEndSessions(deviceKey: any, txn: any, func: any): void;
  getOrAddOutgoingRoomKeyRequest(request: any): any;
  getOutgoingRoomKeyRequest(requestBody: any): any;
  getOutgoingRoomKeyRequestByState(wantedStates: any): any;
  getOutgoingRoomKeyRequestsByTarget(userId: any, deviceId: any, wantedStates: any): any;
  getSessionsNeedingBackup(limit: any): any;
  markSessionsNeedingBackup(sessions: any): any;
  storeAccount(txn: any, newData: any): void;
  storeEndToEndDeviceData(deviceData: any, txn: any): void;
  storeEndToEndInboundGroupSession(senderCurve25519Key: any, sessionId: any, sessionData: any, txn: any): void;
  storeEndToEndRoom(roomId: any, roomInfo: any, txn: any): void;
  storeEndToEndSession(deviceKey: any, sessionId: any, sessionInfo: any, txn: any): void;
  unmarkSessionsNeedingBackup(sessions: any): any;
  updateOutgoingRoomKeyRequest(requestId: any, expectedState: any, updates: any): any;
}
export class Room {
  constructor(roomId: any, client: any, myUserId: any, opts: any);
  reEmitter: any;
  myUserId: any;
  roomId: any;
  name: any;
  tags: any;
  accountData: any;
  summary: any;
  storageToken: any;
  addAccountData(events: any): void;
  addEventsToTimeline(events: any, toStartOfTimeline: any, timeline: any, paginationToken: any): void;
  addListener(type: any, listener: any): any;
  addLiveEvents(events: any, duplicateStrategy: any): void;
  addPendingEvent(event: any, txnId: any): void;
  addReceipt(event: any, fake: any): void;
  addTags(event: any): void;
  addTimeline(): any;
  clearLoadedMembersIfNeeded(...args: any[]): any;
  emit(type: any, args: any): any;
  eventNames(): any;
  findEventById(eventId: any): any;
  getAccountData(type: any): any;
  getAliases(): any;
  getAvatarFallbackMember(): any;
  getAvatarUrl(baseUrl: any, width: any, height: any, resizeMethod: any, allowDefault: any): any;
  getBlacklistUnverifiedDevices(): any;
  getCanonicalAlias(): any;
  getDMInviter(): any;
  getDefaultRoomName(userId: any): any;
  getEncryptionTargetMembers(...args: any[]): any;
  getEventReadUpTo(userId: any, ignoreSynthesized: any): any;
  getInvitedAndJoinedMemberCount(): any;
  getInvitedMemberCount(): any;
  getJoinedMemberCount(): any;
  getJoinedMembers(): any;
  getLiveTimeline(): any;
  getMaxListeners(): any;
  getMember(userId: any): any;
  getMembersWithMembership(membership: any): any;
  getMyMembership(): any;
  getOrCreateFilteredTimelineSet(filter: any): any;
  getPendingEvents(): any;
  getReceiptsForEvent(event: any): any;
  getRecommendedVersion(...args: any[]): any;
  getTimelineForEvent(eventId: any): any;
  getTimelineSets(): any;
  getUnfilteredTimelineSet(): any;
  getUnreadNotificationCount(type: any): any;
  getUsersReadUpTo(event: any): any;
  getVersion(): any;
  guessDMUserId(): any;
  hasMembershipState(userId: any, membership: any): any;
  hasUnverifiedDevices(...args: any[]): any;
  listenerCount(type: any): any;
  listeners(type: any): any;
  loadMembersIfNeeded(): any;
  maySendMessage(): any;
  off(type: any, listener: any): any;
  on(type: any, listener: any): any;
  once(type: any, listener: any): any;
  prependListener(type: any, listener: any): any;
  prependOnceListener(type: any, listener: any): any;
  rawListeners(type: any): any;
  recalculate(): void;
  removeAllListeners(type: any, ...args: any[]): any;
  removeEvent(eventId: any): any;
  removeEvents(event_ids: any): void;
  removeFilteredTimelineSet(filter: any): void;
  removeListener(type: any, listener: any): any;
  resetLiveTimeline(backPaginationToken: any, forwardPaginationToken: any): void;
  setBlacklistUnverifiedDevices(value: any): void;
  setMaxListeners(n: any): any;
  setSummary(summary: any): void;
  setUnreadNotificationCount(type: any, count: any): void;
  shouldEncryptForInvitedMembers(): any;
  shouldUpgradeToVersion(): any;
  updateMyMembership(membership: any): void;
  updatePendingEvent(event: any, newStatus: any, newEventId: any): void;
  userMayUpgradeRoom(userId: any): any;
}
export class RoomMember {
  constructor(roomId: any, userId: any);
  roomId: any;
  userId: any;
  typing: any;
  name: any;
  rawDisplayName: any;
  powerLevel: any;
  powerLevelNorm: any;
  user: any;
  membership: any;
  events: any;
  addListener(type: any, listener: any): any;
  emit(type: any, args: any): any;
  eventNames(): any;
  getAvatarUrl(baseUrl: any, width: any, height: any, resizeMethod: any, allowDefault: any, allowDirectLinks: any): any;
  getDMInviter(): any;
  getLastModifiedTime(): any;
  getMaxListeners(): any;
  getMxcAvatarUrl(): any;
  isKicked(): any;
  isOutOfBand(): any;
  listenerCount(type: any): any;
  listeners(type: any): any;
  markOutOfBand(): void;
  off(type: any, listener: any): any;
  on(type: any, listener: any): any;
  once(type: any, listener: any): any;
  prependListener(type: any, listener: any): any;
  prependOnceListener(type: any, listener: any): any;
  rawListeners(type: any): any;
  removeAllListeners(type: any, ...args: any[]): any;
  removeListener(type: any, listener: any): any;
  setMaxListeners(n: any): any;
  setMembershipEvent(event: any, roomState: any): void;
  setPowerLevelEvent(powerLevelEvent: any): void;
  setTypingEvent(event: any): void;
}
export class RoomState {
  constructor(roomId: any, ...args: any[]);
  roomId: any;
  members: any;
  events: any;
  paginationToken: any;
  addListener(type: any, listener: any): any;
  clearOutOfBandMembers(): void;
  clone(): any;
  emit(type: any, args: any): any;
  eventNames(): any;
  getInviteForThreePidToken(token: any): any;
  getInvitedMemberCount(): any;
  getJoinedMemberCount(): any;
  getLastModifiedTime(): any;
  getMaxListeners(): any;
  getMember(userId: any): any;
  getMembers(): any;
  getMembersExcept(excludedIds: any): any;
  getSentinelMember(userId: any): any;
  getStateEvents(eventType: any, stateKey: any): any;
  getUserIdsWithDisplayName(displayName: any): any;
  listenerCount(type: any): any;
  listeners(type: any): any;
  markOutOfBandMembersFailed(): void;
  markOutOfBandMembersStarted(): void;
  mayClientSendStateEvent(stateEventType: any, cli: any): any;
  maySendEvent(eventType: any, userId: any): any;
  maySendMessage(userId: any): any;
  maySendRedactionForEvent(mxEvent: any, userId: any): any;
  maySendStateEvent(stateEventType: any, userId: any): any;
  mayTriggerNotifOfType(notifLevelKey: any, userId: any): any;
  needsOutOfBandMembers(): any;
  off(type: any, listener: any): any;
  on(type: any, listener: any): any;
  once(type: any, listener: any): any;
  prependListener(type: any, listener: any): any;
  prependOnceListener(type: any, listener: any): any;
  rawListeners(type: any): any;
  removeAllListeners(type: any, ...args: any[]): any;
  removeListener(type: any, listener: any): any;
  setInvitedMemberCount(count: any): void;
  setJoinedMemberCount(count: any): void;
  setMaxListeners(n: any): any;
  setOutOfBandMembers(stateEvents: any): void;
  setStateEvents(stateEvents: any): void;
  setTypingEvent(event: any): void;
  setUnknownStateEvents(events: any): void;
}
export class SyncAccumulator {
  constructor(opts: any);
  opts: any;
  accountData: any;
  inviteRooms: any;
  joinRooms: any;
  nextBatch: any;
  groups: any;
  accumulate(syncResponse: any): void;
  getJSON(): any;
  getNextBatchToken(): any;
}
export class TimelineWindow {
  constructor(client: any, timelineSet: any, opts: any);
  canPaginate(direction: any): any;
  getEvents(): any;
  load(initialEventId: any, initialWindowSize: any): any;
  paginate(direction: any, size: any, makeRequest: any, requestLimit: any): any;
  unpaginate(delta: any, startOfTimeline: any): void;
}
export class User {
  constructor(userId: any);
  userId: any;
  presence: any;
  presenceStatusMsg: any;
  displayName: any;
  rawDisplayName: any;
  avatarUrl: any;
  lastActiveAgo: any;
  lastPresenceTs: any;
  currentlyActive: any;
  events: any;
  addListener(type: any, listener: any): any;
  emit(type: any, args: any): any;
  eventNames(): any;
  getLastActiveTs(): any;
  getLastModifiedTime(): any;
  getMaxListeners(): any;
  listenerCount(type: any): any;
  listeners(type: any): any;
  off(type: any, listener: any): any;
  on(type: any, listener: any): any;
  once(type: any, listener: any): any;
  prependListener(type: any, listener: any): any;
  prependOnceListener(type: any, listener: any): any;
  rawListeners(type: any): any;
  removeAllListeners(type: any, ...args: any[]): any;
  removeListener(type: any, listener: any): any;
  setAvatarUrl(url: any): void;
  setDisplayName(name: any): void;
  setMaxListeners(n: any): any;
  setPresenceEvent(event: any): void;
  setRawDisplayName(name: any): void;
}
export class WebStorageSessionStore {
  constructor(webStore: any);
  store: any;
  getAllEndToEndDevices(): any;
  getAllEndToEndInboundGroupSessionKeys(): any;
  getAllEndToEndRooms(): any;
  getAllEndToEndSessions(): any;
  getEndToEndAccount(): any;
  getEndToEndDeviceSyncToken(): any;
  getEndToEndDeviceTrackingStatus(): any;
  getEndToEndInboundGroupSession(senderKey: any, sessionId: any): any;
  getEndToEndSessions(deviceKey: any): any;
  getLocalTrustedBackupPubKey(): any;
  removeAllEndToEndInboundGroupSessions(): void;
  removeAllEndToEndRooms(): void;
  removeAllEndToEndSessions(): void;
  removeEndToEndAccount(): void;
  removeEndToEndDeviceData(): void;
  setLocalTrustedBackupPubKey(pubkey: any): void;
}
export function createClient(opts: any): MatrixClient;
export function createNewMatrixCall(client: any, roomId: any, options: any): any;
export function getRequest(): any;
export function request(r: any): void;
export function setCryptoStoreFactory(fac: any): void;
export function setMatrixCallAudioInput(deviceId: any): void;
export function setMatrixCallAudioOutput(deviceId: any): void;
export function setMatrixCallVideoInput(deviceId: any): void;
export function wrapRequest(wrapper: any): void;
